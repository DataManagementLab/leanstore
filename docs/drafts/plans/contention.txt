Cases:
1- TPC-C like: few pages have high contention because many threads are updating "more than one" tuple in the same page

2- YCSB with high skew: despite having high contention, splitting will be disadvantegous for the system, because in a page, only one tupe is getting updated frequently.


Split condition:
1- more than a restart pro update
2- restarts happened because of more than one postition

Pit falls:
1- one heavily updated and one rarely updated tuple in a page will still cause a split.
2- The two tuples can also land in the same page after split
3- after split, the page gets updated and the restarts_counter never gets reset and then the buffer frame escapes the tryMerge at cooling stage

But this is the same problem with replacement strategy, we can not anticipate the workload

Tracking methods:
* restarts_counter
* access_counter



Abstract speak: what do we want to measure assuming free tracking ?
normalize the different positions:
