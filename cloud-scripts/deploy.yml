---
- name: Initialize some default values
  hosts: all
  connection: ssh
  tasks:
    - set_fact:
        private_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    - set_fact:
        node_exporter_version: "{{ node_exporter_version | default('1.2.2') }}"
        prometheus_version: "{{ prometheus_version | default('2.31.1') }}"
    - set_fact:
        node_exporter_binary:
          src: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
          remote: yes
      when: node_exporter_binary is not defined
    - set_fact:
        prometheus_binary:
          src: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
          remote: yes
      when: prometheus_binary is not defined

- name: ZK - Check default disk configuration
  hosts: zookeepers
  connection: ssh
  become: yes
  tasks:
    - name: Count fstab lines
      ansible.builtin.command: wc -l /etc/fstab
      register: zk_fstab_line_count


- name: Format and mount disks for Zookeeper hosts
  hosts: zookeepers
  connection: ssh
  become: yes
  vars:
    zk_disk_format_required: zk_fstab_line_count | int > 2
  tasks:
    - name: Remove default SSD mount config
      shell: "head -n -1 /etc/fstab > tempfile && mv tempfile /etc/fstab"
      when: zk_disk_format_required
    
    - name: Reboot with unmounted SSDs
      ansible.builtin.reboot:
        reboot_timeout: 240
      when: zk_disk_format_required

    - name: Format disks
      filesystem:
        fstype: xfs
        dev: '{{ item }}'
        force: true
      with_items:
        - "/dev/xvdb"
        - "/dev/xvdc"
      when: zk_disk_format_required

    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      #register: mount_result
      #until: mount_result is success
      #retries: 10
      #delay: 15
      with_items:
        - { path: "/mnt/zookeeper/logs", src: "/dev/xvdb" }
        - { path: "/mnt/zookeeper/data", src: "/dev/xvdc" }

- name: BK - Check default disk configuration
  hosts: bookies
  connection: ssh
  become: yes
  tasks:
    - name: Count fstab lines
      ansible.builtin.command: wc -l /etc/fstab
      register: bk_fstab_line_count
      changed_when: false

- name: Format and mount disks for BookKeeper hosts
  hosts: bookies
  connection: ssh
  become: yes
  vars:
    bk_disk_format_required: bk_fstab_line_count | int > 2
  tasks:
    - name: Remove default SSD mount config
      shell: "head -n -1 /etc/fstab > tempfile && mv tempfile /etc/fstab"
      when: bk_disk_format_required
    
    - name: Reboot with unmounted SSDs
      ansible.builtin.reboot:
        reboot_timeout: 240
      when: bk_disk_format_required

    - name: Format disks
      filesystem:
         fstype: xfs
         dev: '{{ item }}'
         force: true
      with_items:
        - "/dev/xvdb"
        - "/dev/xvdc"
      when: bk_disk_format_required
    
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items:
        - { path: "/mnt/journal", src: "/dev/xvdb" }
        - { path: "/mnt/storage", src: "/dev/xvdc" }

- name: Common Installation Tasks
  hosts: all
  connection: ssh
  become: yes
  vars:
    java_version: "17"
  tasks:
    - name: Install common dependencies
      apt:
        name: 
          - openjdk-{{ java_version }}-jdk
          - wget
          - tar
          - vim
          - chrony
        state: present
        update_cache: yes
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
          LC_ALL=en_US.utf-8' > /etc/environment



# - name: Install Node exporter on Brokers to collect system metrics
#   hosts: bookies
#   become: true
#   tasks:
#     - name: Add user node_exporter
#       user:
#         name: node_exporter
#         shell: /bin/false
#         system: true
#         create_home: no
#     - name: Download and extract
#       unarchive:
#         src: "{{ node_exporter_binary.src }}"
#         dest: /tmp
#         remote_src: "{{ node_exporter_binary.remote }}"

#     - name: Copy bin node_exporter to /usr/local/bin
#       copy:
#         src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
#         remote_src: yes
#         dest: /usr/local/bin/
#         owner: node_exporter
#         group: node_exporter
#         mode: u+x,g+x,o+x

#     - name: Create service node_exporter.service
#       blockinfile:
#         path: /etc/systemd/system/node_exporter.service
#         block: |
#           [Unit]
#           Description=Prometheus Node Exporter
#           Wants=network-online.target
#           After=network-online.target
#           [Service]
#           User=node_exporter
#           Group=node_exporter
#           Type=simple
#           ExecStart=/usr/local/bin/node_exporter
#           [Install]
#           WantedBy=multi-user.target
#         create: true
#     - name: systemctl daemon_reload
#       systemd:
#         daemon_reload: yes

#     - name: Start and Enable node_exporter
#       service:
#         name: node_exporter
#         state: started
#         enabled: yes

#     - name: Check whether port 9100 is available
#       wait_for:
#         port: 9100
#         state: started
#         timeout: 5

- name: Install and Configure Zookeeper
  hosts: zookeepers
  connection: ssh
  become: yes
  tasks:
    - set_fact:
        zookeeper_version: "3.8.4"
        zookeeper_install_dir: "/opt/zookeeper"
        zookeeper_data_dir: "/mnt/zookeeper/data"
    - set_fact:
        zid: "{{ groups['zookeepers'].index(inventory_hostname) }}"
    # - name: Remove old Zookeeper installation
    #   file:
    #     path: "{{ item }}"
    #     state: absent
    #   loop:
    #     - "{{ zookeeper_install_dir }}"
    #     - "/opt/apache-zookeeper-{{ zookeeper_version }}-bin.tar.gz"
    #     - "{{ zookeeper_data_dir }}"
 
    - name: Download and extract Zookeeper
      unarchive:
        src: "https://downloads.apache.org/zookeeper/zookeeper-{{ zookeeper_version }}/apache-zookeeper-{{ zookeeper_version }}-bin.tar.gz"
        dest: /opt/
        remote_src: yes
        creates: "/opt/apache-zookeeper-{{ zookeeper_version }}-bin"

    - name: Create symbolic link and data directory
      file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        src: "{{ item.src | default(omit) }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - { path: "{{ zookeeper_install_dir }}", state: link, src: "/opt/apache-zookeeper-{{ zookeeper_version }}-bin" }
        - { path: "{{ zookeeper_data_dir }}", state: directory }

    - name: Template Zookeeper configuration
      template:
        src: "templates/zoo.cfg"
        dest: "{{ zookeeper_install_dir }}/conf/zoo.cfg"
      notify: Restart Zookeeper
    
    - name: Template Zookeeper myid file
      template:
        src: templates/myid
        dest: "{{ zookeeper_data_dir }}/myid"
      notify: Restart Zookeeper
     
  handlers:
    - name: Restart Zookeeper
      become: yes
      shell: "{{ zookeeper_install_dir }}/bin/zkServer.sh restart"

- name: Install and Configure BookKeeper
  hosts: bookies
  connection: ssh
  become: yes
  tasks:
    - set_fact:
        bookkeeper_version: "4.17.1"
        bookkeeper_install_dir: "/opt/bookkeeper"
        bookkeeper_data_dirs: "/mnt/storage/0,/mnt/storage/1"
        bookkeeper_journal_dir: "/mnt/journal/0,/mnt/journal/1"
        zookeeperServers: "{{ groups['zookeepers'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
        
    # - name: Remove old BookKeeper installation
    #   file:
    #     path: "{{ item }}"
    #     state: absent
    #   loop:
    #     - "{{ bookkeeper_install_dir }}"
    #     - "/opt/bookkeeper-server-{{ bookkeeper_version }}-bin.tar.gz"
    #     - "{{ bookkeeper_journal_dir }}"
    #     - "{{ bookkeeper_data_dirs[0] }}"

    - name: Download and extract BookKeeper
      unarchive:
        src: "https://downloads.apache.org/bookkeeper/bookkeeper-{{ bookkeeper_version }}/bookkeeper-server-{{ bookkeeper_version }}-bin.tar.gz"
        dest: /opt/
        remote_src: yes
        creates: "/opt/bookkeeper-server-{{ bookkeeper_version }}"

    - name: Create symbolic link and directories
      file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        src: "{{ item.src | default(omit) }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - { path: "{{ bookkeeper_install_dir }}", state: link, src: "/opt/bookkeeper-server-{{ bookkeeper_version }}" }
        - { path: "{{ bookkeeper_journal_dir }}", state: directory }
        - { path: "{{ bookkeeper_data_dirs[0] }}", state: directory }
    - set_fact:
        skip_journal: "{{ skip_journal | default(false) }}"
    - name: Apply BookKeeper configuration file [Bypass Journal]
      template:
        src: "templates/bookkeeper-skip-journal.conf"
        dest: "{{ bookkeeper_install_dir }}/conf/bk_server.conf"
      notify: Restart BookKeeper
      when: skip_journal|bool
    - name: Apply BookKeeper configuration file
      template:
        src: "templates/bookkeeper.conf"
        dest: "/{{ bookkeeper_install_dir }}/conf/bk_server.conf"
      notify: Restart BookKeeper
      when: not skip_journal|bool

    - name: Run metaformat command
      shell: "{{ bookkeeper_install_dir }}/bin/bookkeeper shell metaformat"
      when: inventory_hostname == groups['bookies'][0]

  handlers:
    - name: Restart BookKeeper
      become: yes
      shell: "{{ bookkeeper_install_dir }}/bin/bookkeeper-daemon.sh restart bookie"

# - name: Chrony setup
#   hosts: client
#   connection: ssh
#   become: true
#   tasks:
#     - name: Set up chronyd
#       template:
#         src: "templates/chrony.conf"
#         dest: "/etc/chrony.conf"
#     - systemd:
#         state: restarted
#         daemon_reload: yes
#         name: "chronyd"

- name: Deploy and copy Benchmark
  hosts: client-0
  connection: ssh
  become: yes
  vars:
    remote_dir: /home/ubuntu
    local_dir: ./synth-bench
  tasks:
    - name: Ensure required packages are installed on the remote host
      apt:
        name: 
          - maven
          - rsync
          - python3
          - python3-pip
        state: present
        update_cache: yes

    - name: Prepare benchmark directory
      file:
        path: "{{ remote_dir }}"
        state: directory

    - name: Sync lab24-log-service-benchmark folder
      synchronize:
        src: "{{ local_dir }}/"
        dest: "{{ remote_dir }}/lab24-log-service-benchmark"
        delete: yes
        recursive: yes
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=*.pyc"
      delegate_to: localhost


    - name: Set correct permissions on transferred files
      file:
        path: "{{ remote_dir }}/lab24-log-service-benchmark"
        mode: u+rwX,g+rX,o+rX
        recurse: yes

    - name: Install Python requirements
      pip:
        requirements: "{{ remote_dir }}/lab24-log-service-benchmark/experiment-runner/src/requirements.txt"
        executable: pip3


# - name: Prometheus installation
#   hosts: prometheus
#   connection: ssh
#   become: true
#   tasks:
#     - name: Update apt cache
#       apt:
#         update_cache: yes

#     - name: Install dependencies
#       apt:
#         name: 
#           - apt-transport-https
#           - ca-certificates
#           - curl
#           - software-properties-common
#         state: present

#     - name: Add Docker GPG key
#       apt_key:
#         url: https://download.docker.com/linux/ubuntu/gpg
#         state: present

#     - name: Add Docker repository
#       apt_repository:
#         repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_facts['distribution_release'] }} stable"
#         state: present

#     - name: Install Docker
#       apt:
#         name: docker-ce
#         state: latest

#     - name: Start Docker
#       service:
#         name: docker
#         state: started
#         enabled: yes

#     - name: Remove old Prometheus directory
#       file:
#         path: /opt/prometheus
#         state: absent

#     - name: Create Prometheus directory
#       file:
#         path: /opt/prometheus
#         state: directory

#     - name: Download Prometheus Binary Package
#       unarchive:
#         src: "{{ prometheus_binary.src }}"
#         remote_src: "{{ prometheus_binary.remote }}"
#         dest: /opt/prometheus
#         extra_opts: ["--strip-components=1"]


# - name: Prometheus setup
#   hosts: prometheus
#   connection: ssh
#   become: true
#   tasks:
#     - name: Remove old Pulsar directory
#       file:
#         path: /opt/pulsar
#         state: absent

#     - name: Create Pulsar directory
#       file:
#         path: /opt/pulsar
#         state: directory

#     - name: Create Prometheus data directory
#       file:
#         path: "/opt/prometheus/{{ item }}"
#         state: directory
#       with_items:
#         - data

#     - name: Deploy Prometheus systemd service
#       template:
#         src: "templates/prometheus.service"
#         dest: "/etc/systemd/system/prometheus.service"

#     - name: Deploy Pulsar Dashboard systemd service
#       template:
#         src: "templates/pulsar-dashboard.service"
#         dest: "/etc/systemd/system/pulsar-dashboard.service"

#     - name: Deploy Prometheus configuration
#       template:
#         src: "templates/prometheus.yml"
#         dest: "/opt/prometheus/prometheus.yml"

#     - name: Reload systemd
#       systemd:
#         daemon_reload: yes

#     - name: Restart Prometheus service
#       systemd:
#         name: prometheus
#         state: restarted

#     - name: Restart Bookie Dashboard service
#       systemd:
#         name: Pulsar-dashboard
#         state: restarted
- name: List host addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Zookeeper servers {{ item }}"
      with_items: "{{ groups['zookeepers'] }}"
    - debug:
        msg: "BookKeeper servers {{ item }}"
      with_items: "{{ groups['bookies'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['clients'] }}"
    - debug:
        msg: "Prometheus servers {{ item }}"
      with_items: "{{ groups['prometheus'] }}"
